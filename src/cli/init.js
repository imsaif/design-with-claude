const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');

async function initProject(projectName = 'my-design-project', options = {}) {
  const projectPath = path.resolve(projectName);

  console.log(chalk.gray(`Creating project at: ${projectPath}`));

  try {
    // Create project structure
    await fs.ensureDir(projectPath);
    await fs.ensureDir(path.join(projectPath, '.design-project'));
    await fs.ensureDir(path.join(projectPath, '.design-project', 'templates'));
    await fs.ensureDir(path.join(projectPath, 'src', 'components'));
    await fs.ensureDir(path.join(projectPath, 'src', 'layouts'));
    await fs.ensureDir(path.join(projectPath, 'src', 'assets'));
    await fs.ensureDir(path.join(projectPath, 'tokens'));
    await fs.ensureDir(path.join(projectPath, 'exports', 'html'));
    await fs.ensureDir(path.join(projectPath, 'exports', 'react'));
    await fs.ensureDir(path.join(projectPath, 'exports', 'vue'));
    await fs.ensureDir(path.join(projectPath, 'exports', 'figma'));

    // Generate project configuration
    const config = {
      name: projectName,
      version: '1.0.0',
      framework: options.framework || 'react',
      styling: options.styling || 'css',
      tokens: {
        colorMode: 'hsl',
        spacing: '4px-base',
        typography: {
          scale: 'modular',
          baseSize: 16
        }
      },
      components: {
        prefix: '',
        typescript: true
      },
      export: {
        formats: ['html', 'react', 'vue'],
        figma: {
          enabled: false,
          token: null
        }
      },
      createdAt: new Date().toISOString(),
      lastUpdated: new Date().toISOString()
    };

    await fs.writeJSON(
      path.join(projectPath, '.design-project', 'config.json'),
      config,
      { spaces: 2 }
    );

    // Generate initial state file
    const state = {
      initialized: true,
      version: '1.0.0',
      tokens: {
        generated: false,
        lastGenerated: null
      },
      components: {
        generated: [],
        lastGenerated: null
      },
      layouts: {
        generated: [],
        lastGenerated: null
      },
      exports: {
        lastExported: {}
      }
    };

    await fs.writeJSON(
      path.join(projectPath, '.design-project', 'state.json'),
      state,
      { spaces: 2 }
    );

    // Generate README
    const readme = `# ${projectName}

Generated by Design Implementation Tool

## Project Structure

\`\`\`
${projectName}/
‚îú‚îÄ‚îÄ .design-project/     # Configuration and state
‚îú‚îÄ‚îÄ src/                 # Generated source files
‚îÇ   ‚îú‚îÄ‚îÄ components/      # Generated components
‚îÇ   ‚îú‚îÄ‚îÄ layouts/         # Generated layouts
‚îÇ   ‚îî‚îÄ‚îÄ assets/          # Generated assets
‚îú‚îÄ‚îÄ tokens/              # Design tokens
‚îî‚îÄ‚îÄ exports/             # Export outputs
    ‚îú‚îÄ‚îÄ html/            # HTML/CSS exports
    ‚îú‚îÄ‚îÄ react/           # React components
    ‚îú‚îÄ‚îÄ vue/             # Vue components
    ‚îî‚îÄ‚îÄ figma/           # Figma export data
\`\`\`

## Configuration

Framework: ${config.framework}
Styling: ${config.styling}

## Usage

\`\`\`bash
# Generate from a design brief
design-create from-brief "Modern landing page with hero section"

# Generate specific components
design-create component button --variants primary,secondary

# Generate design tokens
design-create tokens --style modern-minimal

# Export to different formats
design-create export html
design-create export react
design-create export figma --figma-token YOUR_TOKEN
\`\`\`

## Generated on

${new Date().toLocaleDateString()}
`;

    await fs.writeFile(path.join(projectPath, 'README.md'), readme);

    // Create gitignore
    const gitignore = `# Dependencies
node_modules/

# Environment files
.env
.env.local

# Build outputs
dist/
build/

# Design tool cache
.design-project/cache/

# Logs
*.log
`;

    await fs.writeFile(path.join(projectPath, '.gitignore'), gitignore);

    console.log(chalk.green('üìÅ Project structure created'));
    console.log(chalk.green('‚öôÔ∏è  Configuration files generated'));
    console.log(chalk.green('üìù README.md created'));

    console.log(chalk.blue('\nNext steps:'));
    console.log(chalk.gray(`  cd ${projectName}`));
    console.log(chalk.gray('  design-create from-brief "your design brief"'));

  } catch (error) {
    console.error(chalk.red('Error creating project:'), error);
    throw error;
  }
}

module.exports = { initProject };