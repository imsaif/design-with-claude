const fs = require('fs-extra');
const path = require('path');
const { initProject } = require('../src/cli/init');

describe('initProject', () => {
  const testProjectName = 'test-project';
  const testProjectPath = path.resolve(testProjectName);

  afterEach(async () => {
    // Clean up test project directory
    if (await fs.pathExists(testProjectPath)) {
      await fs.remove(testProjectPath);
    }
  });

  test('creates project directory structure', async () => {
    await initProject(testProjectName);

    // Check if main directories exist
    expect(await fs.pathExists(testProjectPath)).toBe(true);
    expect(await fs.pathExists(path.join(testProjectPath, '.design-project'))).toBe(true);
    expect(await fs.pathExists(path.join(testProjectPath, 'src'))).toBe(true);
    expect(await fs.pathExists(path.join(testProjectPath, 'tokens'))).toBe(true);
    expect(await fs.pathExists(path.join(testProjectPath, 'exports'))).toBe(true);
  });

  test('creates configuration file', async () => {
    await initProject(testProjectName);

    const configPath = path.join(testProjectPath, '.design-project', 'config.json');
    expect(await fs.pathExists(configPath)).toBe(true);

    const config = await fs.readJSON(configPath);
    expect(config.name).toBe(testProjectName);
    expect(config.framework).toBe('react');
    expect(config.version).toBe('1.0.0');
  });

  test('creates README.md', async () => {
    await initProject(testProjectName);

    const readmePath = path.join(testProjectPath, 'README.md');
    expect(await fs.pathExists(readmePath)).toBe(true);

    const readme = await fs.readFile(readmePath, 'utf8');
    expect(readme).toContain(testProjectName);
    expect(readme).toContain('Generated by Design Implementation Tool');
  });

  test('accepts custom options', async () => {
    const options = {
      framework: 'vue',
      styling: 'scss'
    };

    await initProject(testProjectName, options);

    const configPath = path.join(testProjectPath, '.design-project', 'config.json');
    const config = await fs.readJSON(configPath);

    expect(config.framework).toBe('vue');
    expect(config.styling).toBe('scss');
  });
});